---Hybrid Trie---
-Determining Structure
One really difficult part of this extracredit was trying to figure out what this structure even looked like. Based on hints from CK, I gleaned that our TrieNode should be modified to include as a parameter a list of words. These words would be cleared once a certain capacity had been reached and then the words in the list would be reinserted as a Trie. I then had to extrapolate that the list of words need not include whole words, they would be partialWords based on the number of nodes that have been created. Next, I had to code the structure; my thought process is in the comments.
-Retrieving results
Once I was sure that the Trie had been building correctly, only leaf nodes have lists, I then set to work on retrieving results. I used a capacity of 2 to test in the beginning and an input file with: "Ape", "App", "Apple". The first thing I had to do was, as normal, determine the prefix. I knew that if the word in a list started with input, I should concatenate so I did that for the root. Then I also realized that I also had to use the built up string I used for the regular trie by concatenating it to the prefix and then if that also equaled the user input, then I should also concatenate. This was roughly my thought process; more is in the code. Then I moved to my reevaluated my code with a sample set with 22 words. To test this feature, the user is invited to search for words starting with z and delighting in the results that are returned.