---Levenshtein Distance---
Using the hint on the website, I read about the levenshtein function which takes in two strings and returns "the minimal number of characters you have to replace, insert or delete to transform" (http://php.net/manual/en/function.levenshtein.php). Then I realized that I for each part of the name, I had to pass in the searchterm as one string parameter and the value that's in the database in that column as the second string parameter and check to make sure that the edit distance is less than 2 (which means they could get one letter wrong; weird behavior happens when it's greater than that). I subsequently modified my query to account for this; the user is invited to misspell a name up to one character incorrectly. 

---Prety and Cool UI---
I saw a couple of websites that had a video background for part of the website and sought to emulate it. I followed this tutorial: http://html5doctor.com/video-canvas-magic/ , modifying the code as necessary to convert pixels to grayscale on the fly and found a video of a cool dunk. No special method needed to trigger this. Part of the UI was also getting rid of the search button and have the results fade in and out in response to keyup events that I realized while implementing ajax requests. The user invited to search for names and recieve results when no more characters are entered without needing to press a button. I will speak more about that in the next section.

---Ajax Search---
Because I am searching through an Object's public method, I had to modify this tutorial: http://ninetofive.me/blog/build-a-live-search-with-ajax-php-and-mysql , slightly by adding a DbHandler.php; it is there that a new Db Object is created and search is called on user input passed in through stardard JQuery syntax's ajax method: setting type to "POST", the url to be the new "DbHandler.php", the data to be value of the trimmed user input, the dataType: to be "HTML", etc.. On succuess, the data is passed to an .html() function when the div named "results" is selected. This search executes on keyup of the input named "searchterm" and fades out after 100 seconds so on some browsers there may be some latency. But the effect looked interesting primarily because I had never worked with a time-delay so I included it. I had to move my code to echo the table from underneath my form to the DBHandler.php.

---Pictures---
Frustrated that NBA.com did not have an API that returned player pictures, I stumbled on Google for what seemed to be no avail until I happened upon https://nba-players.herokuapp.com which describes itself as an: "Easy-to-use API to retrieve NBA player headshot images". Realizing that I would recieve first and last name in the BBallPlayer class, the parameters for the endpoint, I decided to include a getImage() function in said class and set the picture to display inline as a span to the table. No special method needed to trigger this, however some players do not have headshots...